package vistas;

import AccesoADatos.AlumnoData;
import AccesoADatos.InscripcionData;
import AccesoADatos.MateriaData;
import Entidades.Alumno;
import Entidades.Inscripcion;
import Entidades.Materia;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Juan
 */
public class Manipulacion_De_Notas extends javax.swing.JInternalFrame {

    private DefaultTableModel modeloTabla = new DefaultTableModel();
    private AlumnoData a1;
    private Alumno a;
    private MateriaData matData;
    private Inscripcion in;
    private InscripcionData ins_data;

    /**
     * Creates new form Manipulacion_De_Notas
     */
    public Manipulacion_De_Notas() {
        initComponents();
        this.setTitle("Carga de Notas");

        cargarCombo();
        agregarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla1 = new javax.swing.JTable();
        BotonGuardar = new javax.swing.JButton();
        BotonSalir = new javax.swing.JButton();

        jLabel1.setText("Seleccione un Alumno");

        ComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBox1ActionPerformed(evt);
            }
        });

        tabla1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabla1.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                tabla1ComponentAdded(evt);
            }
        });
        tabla1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabla1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla1);

        BotonGuardar.setText("Guardar");
        BotonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonGuardarActionPerformed(evt);
            }
        });

        BotonSalir.setText("Salir");
        BotonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(62, 62, 62)
                        .addComponent(ComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(BotonGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BotonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonGuardar)
                    .addComponent(BotonSalir))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonSalirActionPerformed
        // Boton Salir
        dispose();
    }//GEN-LAST:event_BotonSalirActionPerformed

    private void ComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBox1ActionPerformed
        //Instanciamos cada Objeto a Utilizar
        in = new Inscripcion();
        matData = new MateriaData();
        ins_data = new InscripcionData();
        a = new Alumno();

        // Llamar al método obtenerMateriasCursadas para obtener la lista de materias cursadas para el alumno
        List<Materia> materiasCursadas = ins_data.obtenerMateriaCursada(a.getIdAlumno());

        if (materiasCursadas != null) {
            modeloTabla.setRowCount(0);
            // Agregar las materias cursadas a la tabla
            for (Materia mat : matData.listarMaterias()) {
                // Agrega una fila con los datos de la materia
                modeloTabla.addRow(new Object[]{mat.getIdMateria(), mat.getNombre(), in.getNota()});
            }
        }
    }//GEN-LAST:event_ComboBox1ActionPerformed

    private void tabla1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla1MouseClicked

    }//GEN-LAST:event_tabla1MouseClicked

    private void tabla1ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_tabla1ComponentAdded
    }//GEN-LAST:event_tabla1ComponentAdded

    private void BotonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonGuardarActionPerformed
        // Actualizar Nota
        // Obtener el alumno seleccionado en el ComboBox
        Alumno as = (Alumno) ComboBox1.getSelectedItem();
        if (as != null) {
            // Obtener el ID del alumno seleccionado
            int idAlumnoSeleccionado = as.getIdAlumno();

            // Iterar sobre las filas de la tabla para obtener los datos de las materias y las notas
            for (int fila = 0; fila < modeloTabla.getRowCount(); fila++) {
                int idMateria = (int) modeloTabla.getValueAt(fila, 0);
                double nota = Double.parseDouble(modeloTabla.getValueAt(fila, 2).toString());
                // Aquí debes llamar al método de InscripcionData para actualizar la nota en la base de datos
                ins_data.actualizarNota(idAlumnoSeleccionado, idMateria, nota);
            }
            // Mostrar un mensaje de éxito o realizar otras acciones necesarias
            JOptionPane.showMessageDialog(this, "Notas guardadas correctamente.");
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un alumno antes de guardar las notas.");
        }
    }//GEN-LAST:event_BotonGuardarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonGuardar;
    private javax.swing.JButton BotonSalir;
    private javax.swing.JComboBox<Alumno> ComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla1;
    // End of variables declaration//GEN-END:variables
    private void cargarCombo() {
        a1 = new AlumnoData();
        List<Alumno> listaAlumnos = a1.listarAlumnos();

        DefaultComboBoxModel<Alumno> modelo = new DefaultComboBoxModel<>();
        for (Alumno alumno : listaAlumnos) {
            modelo.addElement(alumno);
        }
        ComboBox1.setModel(modelo);
    }

    private void agregarTabla() {
        tabla1.setModel(modeloTabla);
        modeloTabla.addColumn("Codigo");
        modeloTabla.addColumn("Nombre");
        modeloTabla.addColumn("Nota");
    }
}
